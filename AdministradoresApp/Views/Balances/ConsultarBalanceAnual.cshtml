@model EntidadesCompartidasCore.Balance
<script src="https://www.w3schools.com/lib/w3.js"></script>
<script type="text/javascript" src="~/js/site.js"></script>
<script type="text/javascript" src="~/lib/jquery/dist/jquery.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>

@{
    ViewData["Title"] = "Consultar Balance Anual";
}

<h2 class="container">Balance Anual Generado</h2>
@{
    string mensaje = "";

    if (TempData["Mensaje"] != null)
    {
        mensaje = TempData["Mensaje"].ToString();
    }

    var ubt = TempData["UBT"];
    var uot = TempData["UOT"];
    var usit = TempData["USIT"];
    var udet = TempData["UDET"];


}
<div class="container">
    <h4>Balance</h4>
    <hr />
    <dl class="dl-horizontal">

        <dt>
            @Html.DisplayNameFor(model => model.UtilidadBrutaTotal)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.UtilidadBrutaTotal)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.UtilidadEjercicioTotal)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.UtilidadEjercicioTotal)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.UtilidadOperacionalTotal)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.UtilidadOperacionalTotal)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.UtilidadSinimpuestosTotal)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.UtilidadSinimpuestosTotal)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Ingresos)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Ingresos)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.IngresosExtra)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.IngresosExtra)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Gastos)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Gastos)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.GastosExtra)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.GastosExtra)
        </dd>
    </dl>
</div>

<div class="container">

    <h2>Fluctuacion de las utilidades brutas</h2>

    <canvas id="lineChartBlueGreen" style="max-height:200px; max-width:200px"></canvas>

    <br />
    <br />
    <br />

    <h2>Fluctuacion de las utilidades operacionales</h2>

    <canvas id="lineChartPinkOrange" style="max-height:200px; max-width:200px"></canvas>

    <br />
    <br />
    <br />

    <h2>Fluctuacion de las utilidades sin impuestos</h2>

    <canvas id="lineChartOrangeYellow" style="max-height:200px; max-width:200px"></canvas>

    <br />
    <br />
    <br />

    <h2>Fluctuacion de las utilidades del ejercicio</h2>

    <canvas id="lineChartVioletRed" style="max-height:200px; max-width:200px"></canvas>


    <h2>Registros declarados para el ejercicio consultado</h2>


    <p>
        <input oninput="w3.filterHTML('#id01', '.item', this.value)" placeholder="Busqueda multi-columna...">
    </p>

    <div class="table-responsive">
        <table class="table-hover" id="id01">
            <thead>
                <tr>
                    <th>
                        @Html.Label("Fecha")
                    </th>
                    <th>
                        @Html.Label("Utilidad Bruta")
                    </th>
                    <th>
                        @Html.Label("Utilidad Operacional")
                    </th>
                    <th>
                        @Html.Label("Utilidad Sin Impuestos")
                    </th>
                    <th>
                        @Html.Label("Utilidad Ejercicio")
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Registros)
                {
                    <tr class="item">
                        <td>
                            @Html.DisplayFor(modelItem => item.Fecha)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UtilidadBruta)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UtilidadOperacional)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UtilidadSinImpuestos)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UtilidadEjercicio)
                        </td>
                        <td>
                            @Html.ActionLink("Detalles", "Detalles", new { mes = item.Fecha.Month, año = item.Fecha.Year })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div>
        <a asp-action="ConsultarBalance">Volver</a>
    </div>
</div>



@{
    if (mensaje != "")
    {
        if (mensaje.ToLower().Contains("exito"))
        {
            <div id="toast"><div id="img">&#9989;</div><div id="desc">@mensaje</div></div>
        }
        else if (mensaje.ToLower().Contains("error") || mensaje.ToLower().Contains("invalid") || mensaje.ToLower().Contains("incorrecto"))
        {
            <div id="toast"><div id="img">&#10060;</div><div id="desc">@mensaje</div></div>
        }
        else
        {
            <div id="toast"><div id="img">&#10069;</div><div id="desc">@mensaje</div></div>
        }

    }

}

            <script>

                function launch_toast() {
                    var x = document.getElementById("toast")
                    x.className = "show";
                    setTimeout(function () { x.className = x.className.replace("show", ""); }, 5000);
                }


                window.onload = launch_toast;



                //this is the function to create the line chart
                function drawLineChart(div_id, results, yColumn, yLabel, xAxes, firstColour, secondColour, thirdColour, fourthColour) {
                    var ctx = document.getElementById(div_id).getContext("2d");
                    var width = window.innerWidth || document.body.clientWidth;
                    var gradientStroke = ctx.createLinearGradient(0, 0, width, 0);
                    gradientStroke.addColorStop(0, firstColour);
                    gradientStroke.addColorStop(0.3, secondColour);
                    gradientStroke.addColorStop(0.6, thirdColour);
                    gradientStroke.addColorStop(1, fourthColour);

                    var labels = results.map(function (item) {
                        return item[xAxes];
                    });
                    var data = results.map(function (item) {
                        return item[yColumn];
                    });

                    var myChart = new Chart(ctx, {
                        type: "line",
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: yLabel,
                                    borderColor: gradientStroke,
                                    pointBorderColor: gradientStroke,
                                    pointBackgroundColor: gradientStroke,
                                    pointHoverBackgroundColor: gradientStroke,
                                    pointHoverBorderColor: gradientStroke,
                                    pointBorderWidth: 8,
                                    pointHoverRadius: 8,
                                    pointHoverBorderWidth: 1,
                                    pointRadius: 3,
                                    fill: false,
                                    borderWidth: 4,
                                    data: data
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            legend: {
                                position: "none"
                            },
                            scales: {
                                yAxes: [
                                    {
                                        ticks: {
                                            fontFamily: "Roboto Mono",
                                            fontColor: "#556F7B",
                                            fontStyle: "bold",
                                            beginAtZero: true,
                                            maxTicksLimit: 5,
                                            padding: 20
                                        },
                                        gridLines: {
                                            drawTicks: false,
                                            display: false,
                                            drawBorder: false
                                        }
                                    }
                                ],
                                xAxes: [
                                    {
                                        gridLines: {
                                            zeroLineColor: "transparent"
                                        },
                                        ticks: {
                                            padding: 20,
                                            fontColor: "#556F7B",
                                            fontStyle: "bold",
                                            fontFamily: "Roboto Mono"
                                        },
                                        gridLines: {
                                            drawTicks: false,
                                            display: false,
                                            drawBorder: false
                                        }
                                    }
                                ]
                            }
                        }
                    });
                }

                
                //[{ "fecha": "x/01/2018", "suma": -8000.0000 }, { "fecha": "x/02/2018", "suma": 231512.0000 }, { "fecha": "x/03/2018", "suma": 0.0 }]
                /**/
                /**/
                var result = @ubt;
                /**/
                /**/
                var result2 = @uot;
                var result3 = @usit;
                var result4 = @udet;

                //this is to initialise the charts
                function drawCharts() {
                    drawLineChart(
                        "lineChartBlueGreen",
                        result,
                        "suma",
                        "Suma del registro",
                        "fecha",
                        "#7C4DFF",
                        "#448AFF",
                        "#00BCD4",
                        "#1DE9B6"
                    );
                    drawLineChart(
                        "lineChartPinkOrange",
                        result2,
                        "suma",
                        "Suma del registro",
                        "fecha",
                        "#F44336",
                        "#F50057",
                        "#FF4081",
                        "#FF9100"
                    );
                    drawLineChart(
                        "lineChartOrangeYellow",
                        result3,
                        "suma",
                        "Suma del registro",
                        "fecha",
                        "#F44336",
                        "#F50057",
                        "#FF4081",
                        "#FF9100"
                    );
                    drawLineChart(
                        "lineChartVioletRed",
                        result4,
                        "suma",
                        "Suma del registro",
                        "fecha",
                        "#F44336",
                        "#F50057",
                        "#FF4081",
                        "#FF9100"
                    );
                }

                window.onload = drawCharts;


            </script>
